<?php

namespace App\Http\Controllers{{modelDir}};

use App\Http\Controllers\Controller;

use App\Models\{{modelNameWithDir}};
use App\Http\Requests\{{modelNameWithDir}}Request;
use App\Http\Resources\{{modelNameWithDir}}Resource;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class {{modelName}}Controller extends Controller
{

    public function __construct(){
        
    }

    public function index(){

        // $this->authorize("viewAny", {{modelName}}::class);

        $datas = {{modelName}}::get();

        if (count($datas) == 0)
            throw new ModelNotFoundException;

        return dataResponse({{modelName}}Resource::collection($datas));
    }

    public function indexOnlyTrashed(){

        // only super admin can access, and check with middleware at the __construct function

        $datas = {{modelName}}::onlyTrashed()->get();  

        if (count($datas) == 0)
            throw new ModelNotFoundException;

        return dataResponse({{modelName}}Resource::collection($datas));
    }

    public function store({{modelName}}Request $request){

        // $this->authorize("create", {{modelName}}::class);
        
        $data = $request->validated();

        $data = {{modelName}}::create($data);

        return dataResponse(new {{modelName}}Resource($data));
    }

    public function show({{modelName}} ${{modelSnakeCaseName}}){

        // $this->authorize("view", {{modelName}}::class);

        return dataResponse(new {{modelName}}Resource(${{modelSnakeCaseName}}));
    }

    public function update({{modelName}}Request $request,{{modelName}} ${{modelSnakeCaseName}}){

        // $this->authorize("update", {{modelName}}::class);

        $data = $request->validated();

        ${{modelSnakeCaseName}}->update($data); 
        
        return dataResponse(new {{modelName}}Resource(${{modelSnakeCaseName}}));
    }

    public function destroy({{modelName}} ${{modelSnakeCaseName}}){

        // $this->authorize("delete", {{modelName}}::class);

        ${{modelSnakeCaseName}}->delete();

        return destoryResponse();
    }

    public function restore($id){

        // only super admin can access, and check with middleware at the __construct function

        $data = {{modelName}}::onlyTrashed()->findOrFail($id); 

        $data->restore();

        return restoreResponse();
    }

    public function forceDestroy($id){

        // only super admin can access, and check with middleware at the __construct function

        $data = {{modelName}}::withTrashed()->findOrFail($id);

        $data->forceDelete();

        return forceDestoryResponse();
    }
}